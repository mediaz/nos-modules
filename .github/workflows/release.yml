# This is a basic workflow to help you get started with Actions

name: Plugin Releases

# Controls when the workflow will run
on:
  push:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      build_all:
        description: 'Build all plugins'
        required: false
        default: 'false'
      nodos_sdk_version:
        description: 'Nodos SDK Version'
        required: false
        default: ''

env:
  BUILD_NUMBER: ${{ github.run_number }}
  GH_USERNAME: "mediaz-bot"
  GH_RELEASE_REPO_URL: "https://github.com/mediaz/plugins-releases"
  GH_RELEASE_REPO_ORG: "mediaz"
  GH_RELEASE_REPO_NAME: "plugins-releases"
  GIT_EMAIL: "bot@mediaz.io"
  NODOS_SDK_DIR: ${{ github.workspace }}/nosSDK
  GH_TOKEN: ${{ secrets.CI_TOKEN }}

# TODO: Support parallel runs
concurrency:
  group: single # For now, allow 1 run at a time.
  cancel-in-progress: false # Queue up runs if one is already in progress.

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  configure:
    name: Configure
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3 # checkout the repository content to github runner.
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}
          lfs: 'true'
          fetch-depth: 0 # We need the full history to get the latest tag.
          clean: true # Scripts are currently not idempotent, so we need to clean the repo before each run.

      - name: Update Git Credentials
        continue-on-error: true
        run: |
          git credential-manager github login --username ${{ env.GH_USERNAME }} --token ${{ env.GH_TOKEN }} --force

      - name: Install Python Prerequisites
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cleanup SDK Files If Any
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue Nodos-SDK*
        shell: pwsh

      - name: Download Nodos SDK (Specific Version)
        if: ${{  github.event_name == 'workflow_dispatch' && github.event.inputs.nodos_sdk_version != '' }}
        run: |
          gh release download ${{ github.event.inputs.nodos_sdk_version }} --repo mediaz/mediaz --pattern "Nodos-SDK-*.zip" --clobber

      - name: Download Nodos SDK (Latest Stable)
        shell: pwsh
        if: ${{  github.event_name != 'workflow_dispatch' || github.event.inputs.nodos_sdk_version == '' }}
        run: |
          $ReleaseTag = (gh release list --repo mediaz/mediaz | Select-String -Pattern 'stable' | Select-Object -First 1).Line.Split()[0]
          gh release download $ReleaseTag --repo mediaz/mediaz --pattern "Nodos-SDK-*.zip"

      - name: Unzip Nodos SDK
        run: |
          7z x Nodos-SDK-*.zip -o${{ env.NODOS_SDK_DIR }}

      - name: Configure
        run: |
          cmake -S . -B Build -DCMAKE_BUILD_TYPE=Release

      - name: Checkout Release Target Repo
        uses: actions/checkout@v3 # checkout the repository content to github runner.
        with:
          repository: ${{ env.GH_RELEASE_REPO_ORG }}/${{ env.GH_RELEASE_REPO_NAME }}
          token: ${{ secrets.CI_TOKEN }}
          path: release-target-repo
          clean: true

  run_release_tool:
    name: Run Release Tool
    runs-on: self-hosted
    needs: configure
    steps:
      - name: Setup Git
        run: |
          git config user.email "${{ env.GIT_EMAIL }}"
          git config user.name "${{ env.GH_USERNAME }}"

      - name: Run Release Tool (Build All)
        if: ${{ github.event.inputs.build_all == 'true' }}
        run: |
          python actions.py --build-all --cmake-build-dir="./Build"  --repo-url=${{ env.GH_RELEASE_REPO_URL }} --repo-org=${{ env.GH_RELEASE_REPO_ORG }} --repo-name=${{ env.GH_RELEASE_REPO_NAME }} --build-number=${{ env.BUILD_NUMBER }} --cloned-release-repo-dir="./release-target-repo"

      - name: Run Release Tool (Build Changed)
        if: ${{ github.event.inputs.build_all == null || github.event.inputs.build_all == 'false'}}
        run: |
          python actions.py --cmake-build-dir="./Build"  --repo-url=${{ env.GH_RELEASE_REPO_URL }} --repo-org=${{ env.GH_RELEASE_REPO_ORG }} --repo-name=${{ env.GH_RELEASE_REPO_NAME }} --build-number=${{ env.BUILD_NUMBER }} --cloned-release-repo-dir="./release-target-repo"