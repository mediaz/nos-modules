# Copyright MediaZ Teknoloji A.S. All Rights Reserved.

# This is a basic workflow to help you get started with Actions

name: Modules Releases

# Controls when the workflow will run
on:
  push:
    branches: [ dev ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      build_all:
        description: 'Build all modules'
        required: false
        default: 'false'
      nodos_sdk_version:
        description: 'Nodos SDK Version'
        required: false
        default: ''
      clean:
        description: 'Clean build'
        required: false
        default: "false"

env:
  BUILD_NUMBER: ${{ github.run_number }}
  GH_USERNAME: "mediaz-bot"
  GH_RELEASE_REPO_URL: "https://github.com/mediaz/modules-releases"
  GH_RELEASE_REPO_ORG: "mediaz"
  GH_RELEASE_REPO_NAME: "modules-releases"
  GIT_EMAIL: "bot@mediaz.io"
  GH_TOKEN: ${{ secrets.CI_TOKEN }}
  DIST_TARGET_DIR: "D:/Builds/Nodos-Modules"

# TODO: Support parallel runs
concurrency:
  group: single # For now, allow 1 run at a time.
  cancel-in-progress: false # Queue up runs if one is already in progress.

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  configure:
    name: Configure
    runs-on: self-hosted
    steps:
      - name: Update Git Credentials
        continue-on-error: true
        run: |
          git credential-manager github login --username ${{ env.GH_USERNAME }} --token ${{ env.GH_TOKEN }} --force

      - name: Checkout
        shell: pwsh
        run: |
          if (-not (Test-Path -Path ./modules-${{ github.ref_name }})) {
            git clone --branch ${{ github.ref_name }} --depth 1 ${{ github.repositoryUrl }} --recurse-submodule --shallow-submodules ./modules-${{ github.ref_name }}
          }
          cd ./modules-${{ github.ref_name }}
          git fetch origin
          git checkout ${{ github.ref_name }}
          git clean -ffd
          git restore .
          git pull
          git submodule update --force --recursive --init
          git status

      - name: Clean
        shell: pwsh
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.clean == 'true' }}
        run: |
          git clean -ffdx
        working-directory: ./modules-${{ github.ref_name }}
  
      - name: Install Python Prerequisites
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ./modules-${{ github.ref_name }}

      - name: Cleanup
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue Nodos-SDK*
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue ./Workspace
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue ./release-target-repo
        shell: pwsh
        working-directory: ./modules-${{ github.ref_name }}

      - name: Download Nodos SDK (Specific Version)
        if: ${{  github.event_name == 'workflow_dispatch' && github.event.inputs.nodos_sdk_version != '' }}
        run: |
          gh release download ${{ github.event.inputs.nodos_sdk_version }} --repo mediaz/nodos --pattern "Nodos-SDK-*.zip" --clobber
        working-directory: ./modules-${{ github.ref_name }}

      - name: Download Nodos SDK (Latest dev)
        shell: pwsh
        if: ${{  github.event_name != 'workflow_dispatch' || github.event.inputs.nodos_sdk_version == '' }}
        run: |
          $ReleaseTag = (gh release list --repo mediaz/nodos | Select-String -Pattern 'dev' | Select-Object -First 1).Line.Split()[0]
          gh release download $ReleaseTag --repo mediaz/nodos --pattern "Nodos-SDK-*.zip"
        working-directory: ./modules-${{ github.ref_name }}

      - name: Unzip Nodos SDK
        run: |
          7z x Nodos-SDK-*.zip -oWorkspace
        working-directory: ./modules-${{ github.ref_name }}

      - name: Configure
        run: |
          cmake -S ./Workspace/Toolchain/CMake -B Build -DCMAKE_BUILD_TYPE=Release -DMODULE_DIRS="../" -DNOSMAN_WORKSPACE_DIR="./"
        working-directory: ./modules-${{ github.ref_name }}

  run_release_tool:
    name: Run Release Tool
    runs-on: self-hosted
    needs: configure
    steps:
      - name: Checkout Release Target Repo
        uses: actions/checkout@v3 # checkout the repository content to github runner.
        with:
          repository: ${{ env.GH_RELEASE_REPO_ORG }}/${{ env.GH_RELEASE_REPO_NAME }}
          token: ${{ secrets.CI_TOKEN }}
          path: ./modules-${{ github.ref_name }}/release-target-repo
          clean: true

      - name: Setup Git
        run: |
          git config user.email "${{ env.GIT_EMAIL }}"
          git config user.name "${{ env.GH_USERNAME }}"
        working-directory: ./modules-${{ github.ref_name }}

      - name: Run Release Tool (Build All)
        if: ${{ github.event.inputs.build_all == 'true' }}
        run: |
          python ./Scripts/actions.py --nodos-sdk-dir=$SdkDir --scripts-dir="./Scripts" --build-all --cmake-build-dir="./Build"  --repo-url=${{ env.GH_RELEASE_REPO_URL }} --repo-org=${{ env.GH_RELEASE_REPO_ORG }} --repo-name=${{ env.GH_RELEASE_REPO_NAME }} --build-number=${{ env.BUILD_NUMBER }} --cloned-release-repo-dir="./release-target-repo"
        working-directory: ./modules-${{ github.ref_name }}

      - name: Run Release Tool (Build Changed)
        if: ${{ github.event.inputs.build_all == null || github.event.inputs.build_all == 'false'}}
        shell: pwsh
        run: |
          $SdkDirName = (Get-ChildItem -Path ./Workspace/Engine -Force -Recurse -Directory | Select-Object -First 1).Name
          $SdkDir = "./Workspace/Engine/$SdkDirName/SDK"
          python ./Scripts/actions.py --nodos-sdk-dir=$SdkDir --scripts-dir="./Scripts" --cmake-build-dir="./Build" --repo-url=${{ env.GH_RELEASE_REPO_URL }} --repo-org=${{ env.GH_RELEASE_REPO_ORG }} --repo-name=${{ env.GH_RELEASE_REPO_NAME }} --build-number=${{ env.BUILD_NUMBER }} --cloned-release-repo-dir="./release-target-repo"
        working-directory: ./modules-${{ github.ref_name }}
