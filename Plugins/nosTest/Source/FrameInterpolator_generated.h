// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FRAMEINTERPOLATOR_NOS_TEST_H_
#define FLATBUFFERS_GENERATED_FRAMEINTERPOLATOR_NOS_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "array"


namespace nos {
namespace test {

enum class FrameInterpolationMethod : uint32_t {
  REPEAT = 0,
  LINEAR = 1,
  MIN = REPEAT,
  MAX = LINEAR
};

inline const FrameInterpolationMethod (&EnumValuesFrameInterpolationMethod())[2] {
  static const FrameInterpolationMethod values[] = {
    FrameInterpolationMethod::REPEAT,
    FrameInterpolationMethod::LINEAR
  };
  return values;
}

inline const char * const *EnumNamesFrameInterpolationMethod() {
  static const char * const names[3] = {
    "REPEAT",
    "LINEAR",
    nullptr
  };
  return names;
}

inline const char *EnumNameFrameInterpolationMethod(FrameInterpolationMethod e) {
  if (::flatbuffers::IsOutRange(e, FrameInterpolationMethod::REPEAT, FrameInterpolationMethod::LINEAR)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFrameInterpolationMethod()[index];
}

inline const ::flatbuffers::TypeTable *FrameInterpolationMethodTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UINT, 0, 0 },
    { ::flatbuffers::ET_UINT, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    nos::test::FrameInterpolationMethodTypeTable
  };
  static const char * const names[] = {
    "REPEAT",
    "LINEAR"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace test
}  // namespace nos

#endif  // FLATBUFFERS_GENERATED_FRAMEINTERPOLATOR_NOS_TEST_H_
