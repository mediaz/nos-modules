// Copyright MediaZ AS. All Rights Reserved.

#version 450

layout(local_size_x = 20, local_size_y = 12) in;

layout(binding = 0, r8) uniform readonly image2D PlaneY;
layout(binding = 1, r8) uniform readonly image2D PlaneU;
layout(binding = 2, r8) uniform readonly  image2D PlaneV;
layout(binding = 3, rgba8) uniform writeonly image2D Output;

//Derived from ITU-BT.709 Standard/Section 3 Signal Format(Table)/Item3.3; inverse matrix of it
const mat3 yuv_to_rgb = mat3(
     1.0,  0.0001,  1.5748,
    1.0, -0.1874,  -0.4681,
     1.0, 1.8556, 0.0001
);

//We simply dequantize first, see RGBtoYUV420 conversion shader
vec3 ycbcr_to_rgb(vec3 color) {
    vec3 dequantized = vec3( (color.x*256.0 - 16.0)/219.0,
                            (color.y*256.0 - 128.0)/224.0,
                            (color.z*256.0 - 128.0)/224.0);
    vec3 rgb = transpose(yuv_to_rgb)*dequantized;
    return rgb;
}

//TODO: Make averaging while subsampling
void smooth_subsample(){
}

void main() {
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

    float y = imageLoad(PlaneY, uv).r;
    float u = imageLoad(PlaneU, uv/2).r;
    float v = imageLoad(PlaneV, uv/2).r;

	vec3 rgb = ycbcr_to_rgb(vec3(y,u,v));
		
    imageStore(Output, uv, vec4(rgb.x,rgb.y,rgb.z,1.0));
}
