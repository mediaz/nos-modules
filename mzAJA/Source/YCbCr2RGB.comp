#version 450
#include "Common.glsl"

layout (local_size_x = 8, local_size_y = 9) in;
layout (binding = 0, rgba8ui) uniform readonly  uimage2D Source;
layout (binding = 1, rgba16)  uniform writeonly  image2D Output;

void Store2(const vec4 C[2], ivec2 Base)
{
    imageStore(Output, Base + ivec2(0, 0), C[0]);
    imageStore(Output, Base + ivec2(1, 0), C[1]);
}

void Store(const vec4 C[6], ivec2 Base)
{
    imageStore(Output, Base + ivec2(0, 0), C[0]);
    imageStore(Output, Base + ivec2(1, 0), C[1]);
    imageStore(Output, Base + ivec2(2, 0), C[2]);
    imageStore(Output, Base + ivec2(3, 0), C[3]);
    imageStore(Output, Base + ivec2(4, 0), C[4]);
    imageStore(Output, Base + ivec2(5, 0), C[5]);
}

void yuv8(const ivec2 dst, const ivec2 src, const bool interlaced)
{
    uvec4 Y = imageLoad(Source, src);
    vec4 X[2] = vec4[2](SDR_In_8(Y.yxz), SDR_In_8(Y.wxz));
    
    Store2(X, dst);
    if(interlaced) Store2(X, dst + ivec2(0, 1));
}

void main_yuv8()
{
    const int   Interlaced = int((InterlacedFlags & 3) != 0);
    const ivec2 N          = imageSize(Source) / ivec2(gl_NumWorkGroups * gl_WorkGroupSize).xy;
    const ivec2 uv         = ivec2(gl_GlobalInvocationID.xy) * N;
    
    for(int i = 0; i < N.x; ++i)
    {
        for(int j = 0; j < N.y; ++j)
        {
            const ivec2 ij = uv + ivec2(i, j);
            yuv8(ij * ivec2(2, 1 + Interlaced), ij, Interlaced != 0);
        }
    }
}

void Unpack(ivec2 uv, out uvec4 Y[3])
{
    const uvec4 C0 = imageLoad(Source, uv + ivec2(0, 0));
    const uvec4 C1 = imageLoad(Source, uv + ivec2(1, 0));
    const uvec4 C2 = imageLoad(Source, uv + ivec2(2, 0));
    const uvec4 C3 = imageLoad(Source, uv + ivec2(3, 0));
    
    const uvec4 x = uvec4(C0.x, C1.x, C2.x, C3.x);
    const uvec4 y = uvec4(C0.y, C1.y, C2.y, C3.y);
    const uvec4 z = uvec4(C0.z, C1.z, C2.z, C3.z);
    const uvec4 w = uvec4(C0.w, C1.w, C2.w, C3.w);
    
    Y[0] = 0x3FF & (x | (y << 8));
    Y[1] = 0x3FF & ((y >> 2) | (z << 6));
    Y[2] = 0x3FF & ((z >> 4) | (w << 4));
}

void v210(const ivec2 dst, const ivec2 src, const bool interlaced)
{
    uvec4 M[3];
    Unpack(src, M);

    const vec4 X[6] = vec4[6](SDR_In_10(uvec3(M[1][0], M[0][0], M[2][0])),
                              SDR_In_10(uvec3(M[0][1], M[0][0], M[2][0])),
                              SDR_In_10(uvec3(M[2][1], M[1][1], M[0][2])),
                              SDR_In_10(uvec3(M[1][2], M[1][1], M[0][2])),
                              SDR_In_10(uvec3(M[0][3], M[2][2], M[1][3])),
                              SDR_In_10(uvec3(M[2][3], M[2][2], M[1][3])));

    Store(X, dst);
    if(interlaced) Store(X, dst + ivec2(0, 1));
}

void main_v210()
{
    const int   Interlaced = int((InterlacedFlags & 3) != 0);
    const ivec2 N          = imageSize(Source) / ivec2(4, 1) / ivec2(gl_NumWorkGroups * gl_WorkGroupSize).xy;
    const ivec2 uv         = ivec2(gl_GlobalInvocationID.xy) * N;
    
    for(int i = 0; i < N.x; ++i)
    {
        for(int j = 0; j < N.y; ++j)
        {
            const ivec2 ij  = uv + ivec2(i, j);
            v210(ij * ivec2(6, 1 + Interlaced), ij * ivec2(4, 1), Interlaced != 0);
        }
    }
}

void main()
{
    if((InterlacedFlags & 4) == 0) main_yuv8();
    else main_v210();
}