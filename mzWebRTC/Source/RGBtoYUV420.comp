#version 450

layout(local_size_x = 24, local_size_y = 12) in;

layout(binding = 0, rgba8) uniform readonly image2D Input;
layout(binding = 1, r8) uniform writeonly image2D PlaneY;
layout(binding = 2, r8) uniform writeonly image2D PlaneU;
layout(binding = 3, r8) uniform writeonly image2D PlaneV;

//Derived from ITU-BT.709 Standard/Section 3 Signal Format(Table)/Item3.3
const mat3 rgb_to_yuv_bt709 = mat3(
     0.2126,  0.7152,  0.0722,
    -0.1146, -0.3854,  0.5,
     0.5, -0.4542, -0.0459
);

//Quantization step derived from ITU-BT.709 Standard/Section 3 Signal Format(Table)/Item3.4
vec3 ycbcr_from_rgbp(vec3 color) {
    vec3 yuv = transpose(rgb_to_yuv_bt709)*color;
    vec3 quantized = vec3(
        (219.0*yuv.x + 16.0)/256.0,
        (224.0*yuv.y + 128.0)/256.0,
        (224.0*yuv.z + 128.0)/256.0);
    return quantized;
}

vec3 sRGB_to_yuv(vec3 color) {
    return ycbcr_from_rgbp(color);
}

//TODO: Make averaging while subsampling
void smooth_subsample(){
}

void main() {
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

    vec3 rgb = imageLoad(Input, uv).rgb;

	vec3 yuv = sRGB_to_yuv(rgb);
		
    imageStore(PlaneY, uv, vec4(yuv.x));

    if (uv.x % 2 == 0 && uv.y % 2 == 0) {
	
        imageStore(PlaneU, uv / 2, vec4(yuv.y));
        imageStore(PlaneV, uv / 2, vec4(yuv.z));
    }
}
