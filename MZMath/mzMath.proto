syntax = "proto3";

package mz.math;

import "ProtoCommon.proto";

message FAdd
{
	option(mz.proto.type) = CPU;
	option(mz.proto.source_file) = "mzMath";
	option(mz.proto.entry_point) = "FAdd";

    float X = 1 [ (mz.proto.show_as) = INPUT_PIN, (mz.proto.can_show_as) = INPUT_PIN_ONLY ];
    float Y = 2 [ (mz.proto.display_name) = "Y", (mz.proto.show_as) = INPUT_PIN, (mz.proto.can_show_as) = INPUT_PIN_ONLY ];
    float Z = 3 [ (mz.proto.display_name) = "Return", (mz.proto.show_as) = OUTPUT_PIN, (mz.proto.can_show_as) = OUTPUT_PIN_ONLY ];
}

message Square
{
	option(mz.proto.type) = CPU;
	option(mz.proto.source_file) = "mzMath";
	option(mz.proto.entry_point) = "Square";

    float X = 1 [ (mz.proto.show_as) = INPUT_PIN, (mz.proto.can_show_as) = INPUT_PIN_ONLY ];
    float Z = 2 [ (mz.proto.display_name) = "Return", (mz.proto.show_as) = OUTPUT_PIN, (mz.proto.can_show_as) = OUTPUT_PIN_ONLY ];
}

message SquareRoot
{
	option(mz.proto.type) = CPU;
	option(mz.proto.source_file) = "mzMath";
	option(mz.proto.entry_point) = "SquareRoot";

    float X = 1 [ (mz.proto.show_as) = INPUT_PIN, (mz.proto.can_show_as) = INPUT_PIN_ONLY ];
    float Z = 2 [ (mz.proto.show_as) = OUTPUT_PIN, (mz.proto.can_show_as) = OUTPUT_PIN_ONLY ];
}
