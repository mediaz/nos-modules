syntax = "proto3";

package mz.math;

import "ProtoCommon.proto";

message FAdd
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "FAdd";
    option (mz.proto.job_display_name) = "Adder";

    float X = 1 [ (mz.proto.pin_show_as)     = INPUT_PIN,
                  (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    float Y = 2 [ (mz.proto.pin_display_name) = "Y",
                  (mz.proto.pin_show_as)      = INPUT_PIN,
                  (mz.proto.pin_can_show_as)  = INPUT_PIN_ONLY ];
    float Z = 3 [ (mz.proto.pin_display_name) = "Return",
                  (mz.proto.pin_show_as)      = OUTPUT_PIN,
                  (mz.proto.pin_can_show_as)  = OUTPUT_PIN_ONLY ];

    double P1 = 4 [ (mz.proto.pin_display_name) = "INPUT_PIN_OR_PROPERTY Double",
                    (mz.proto.pin_show_as)      = INPUT_PIN,
                    (mz.proto.pin_can_show_as)  = INPUT_PIN_OR_PROPERTY ];

    float P2 = 5 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Float",
                   (mz.proto.pin_show_as)      = PROPERTY,
                   (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];
}

message FSubtract
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "FSubtract";
    option (mz.proto.job_display_name) = "Subtractor";

    float X = 1 [ (mz.proto.pin_display_name) = "Minuend",
                  (mz.proto.pin_show_as)      = INPUT_PIN,
                  (mz.proto.pin_can_show_as)  = INPUT_PIN_ONLY ];

    float Y = 2 [ (mz.proto.pin_display_name) = "Subtrahend",
                  (mz.proto.pin_show_as)      = INPUT_PIN,
                  (mz.proto.pin_can_show_as)  = INPUT_PIN_ONLY ];

    float Z = 3 [ (mz.proto.pin_display_name) = "Difference",
                  (mz.proto.pin_show_as)      = OUTPUT_PIN,
                  (mz.proto.pin_can_show_as)  = OUTPUT_PIN_ONLY ];

    int32 P1 = 4 [ (mz.proto.pin_display_name) = "INPUT_PIN_OR_PROPERTY Int32",
                   (mz.proto.pin_show_as)      = INPUT_PIN,
                   (mz.proto.pin_can_show_as)  = INPUT_PIN_OR_PROPERTY ];

    mz.proto.vec2 P2 = 5 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Vec2",
                           (mz.proto.pin_show_as)      = PROPERTY,
                           (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];
}

message Square
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "Square";
    option (mz.proto.job_display_name) = "Square";

    float X = 1 [ (mz.proto.pin_show_as)     = INPUT_PIN,
                  (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    float Z = 2 [ (mz.proto.pin_display_name) = "Return",
                  (mz.proto.pin_show_as)      = OUTPUT_PIN,
                  (mz.proto.pin_can_show_as)  = OUTPUT_PIN_ONLY ];

    int32 P1 = 3 [ (mz.proto.pin_display_name) = "INPUT_PIN_OR_PROPERTY Int32",
                   (mz.proto.pin_show_as)      = INPUT_PIN,
                   (mz.proto.pin_can_show_as)  = INPUT_PIN_OR_PROPERTY ];

    mz.proto.mat2 P2 = 4 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Mat2",
                           (mz.proto.pin_show_as)      = PROPERTY,
                           (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];

    bool P3 = 5 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Bool",
                  (mz.proto.pin_show_as)      = PROPERTY,
                  (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];
}

message SquareRoot
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "SquareRoot";
    option (mz.proto.job_display_name) = "Square Root";

    float X = 1 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    float Z = 2 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];

    mz.proto.Texture P1 = 3 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Texture",
                              (mz.proto.pin_show_as)      = PROPERTY,
                              (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];

    string P2 = 4 [ (mz.proto.pin_display_name) = "INPUT_PIN_OR_PROPERTY string",
                    (mz.proto.pin_show_as)      = PROPERTY,
                    (mz.proto.pin_can_show_as)  = INPUT_PIN_OR_PROPERTY ];
}
