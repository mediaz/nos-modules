syntax = "proto3";

package mz.math;

import "ProtoCommon.proto";

message FAdd
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "FAdd";
    option (mz.proto.job_display_name) = "Adder";

    float X = 1 [ (mz.proto.pin_show_as)     = INPUT_PIN,
                  (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    float Y = 2 [ (mz.proto.pin_display_name) = "Y",
                  (mz.proto.pin_show_as)      = INPUT_PIN,
                  (mz.proto.pin_can_show_as)  = INPUT_PIN_ONLY ];
    float Z = 3 [ (mz.proto.pin_display_name) = "Return",
                  (mz.proto.pin_show_as)      = OUTPUT_PIN,
                  (mz.proto.pin_can_show_as)  = OUTPUT_PIN_ONLY ];

    double P1 = 4 [ (mz.proto.pin_display_name) = "INPUT_PIN_OR_PROPERTY Double",
                    (mz.proto.pin_show_as)      = INPUT_PIN,
                    (mz.proto.pin_can_show_as)  = INPUT_PIN_OR_PROPERTY ];

    float P2 = 5 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Float",
                   (mz.proto.pin_show_as)      = PROPERTY,
                   (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];
}

message FSubtract
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "FSubtract";
    option (mz.proto.job_display_name) = "Subtractor";

    float X = 1 [ (mz.proto.pin_display_name) = "Minuend",
                  (mz.proto.pin_show_as)      = INPUT_PIN,
                  (mz.proto.pin_can_show_as)  = INPUT_PIN_ONLY ];

    float Y = 2 [ (mz.proto.pin_display_name) = "Subtrahend",
                  (mz.proto.pin_show_as)      = INPUT_PIN,
                  (mz.proto.pin_can_show_as)  = INPUT_PIN_ONLY ];

    float Z = 3 [ (mz.proto.pin_display_name) = "Difference",
                  (mz.proto.pin_show_as)      = OUTPUT_PIN,
                  (mz.proto.pin_can_show_as)  = OUTPUT_PIN_ONLY ];

    int32 P1 = 4 [ (mz.proto.pin_display_name) = "INPUT_PIN_OR_PROPERTY Int32",
                   (mz.proto.pin_show_as)      = INPUT_PIN,
                   (mz.proto.pin_can_show_as)  = INPUT_PIN_OR_PROPERTY ];

    mz.proto.vec2 P2 = 5 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Vec2",
                           (mz.proto.pin_show_as)      = PROPERTY,
                           (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];
}

message Square
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "Square";
    option (mz.proto.job_display_name) = "Square";

    float X = 1 [ (mz.proto.pin_show_as)     = INPUT_PIN,
                  (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    float Z = 2 [ (mz.proto.pin_display_name) = "Return",
                  (mz.proto.pin_show_as)      = OUTPUT_PIN,
                  (mz.proto.pin_can_show_as)  = OUTPUT_PIN_ONLY ];

    int32 P1 = 3 [ (mz.proto.pin_display_name) = "INPUT_PIN_OR_PROPERTY Int32",
                   (mz.proto.pin_show_as)      = INPUT_PIN,
                   (mz.proto.pin_can_show_as)  = INPUT_PIN_OR_PROPERTY ];

    mz.proto.mat2 P2 = 4 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Mat2",
                           (mz.proto.pin_show_as)      = PROPERTY,
                           (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];

    bool P3 = 5 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Bool",
                  (mz.proto.pin_show_as)      = PROPERTY,
                  (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];
}

message SquareRoot
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "SquareRoot";
    option (mz.proto.job_display_name) = "Square Root";

    float X = 1 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    float Z = 2 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];

    mz.proto.Texture P1 = 3 [ (mz.proto.pin_display_name) = "PROPERTY_ONLY Texture",
                              (mz.proto.pin_show_as)      = PROPERTY,
                              (mz.proto.pin_can_show_as)  = PROPERTY_ONLY ];

    string P2 = 4 [ (mz.proto.pin_display_name) = "INPUT_PIN_OR_PROPERTY string",
                    (mz.proto.pin_show_as)      = PROPERTY,
                    (mz.proto.pin_can_show_as)  = INPUT_PIN_OR_PROPERTY ];
}

message AllProtoTypesNode
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "AllProtoTypesNode";
    option (mz.proto.job_display_name) = "AllProtoTypesNode";

    double double__     = 1 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    float float__       = 2 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    int32 int32__       = 3 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    int64 int64__       = 4 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    uint32 uint32__     = 5 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    uint64 uint64__     = 6 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    sint32 sint32__     = 7 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    sint64 sint64__     = 8 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    fixed32 fixed32__   = 9 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    fixed64 fixed64__   = 10 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    sfixed32 sfixed32__ = 11 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    sfixed64 sfixed64__ = 12 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    bool bool__         = 13 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    string string__     = 14 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    bytes bytes__       = 15 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];

    double double_x     = 16 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    float float_x       = 17 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    int32 int32_x       = 18 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    int64 int64_x       = 19 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    uint32 uint32_x     = 20 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    uint64 uint64_x     = 21 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    sint32 sint32_x     = 22 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    sint64 sint64_x     = 23 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    fixed32 fixed32_x   = 24 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    fixed64 fixed64_x   = 25 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    sfixed32 sfixed32_x = 26 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    sfixed64 sfixed64_x = 27 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    bool bool_x         = 28 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    string string_x     = 29 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    bytes bytes_x       = 30 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
}

message AllBuiltinTypesNode
{
    option (mz.proto.job_type)         = CPU;
    option (mz.proto.job_source_file)  = "mzMath";
    option (mz.proto.job_entry_point)  = "AllBuiltinTypesNode";
    option (mz.proto.job_display_name) = "AllBuiltinTypesNode";

    mz.proto.Texture Texture__ = 1 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    mz.proto.Void Void__       = 2 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    mz.proto.vec2 vec2__       = 3 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];
    mz.proto.vec2i vec2i__     = 4 [ (mz.proto.pin_show_as) = INPUT_PIN, (mz.proto.pin_can_show_as) = INPUT_PIN_ONLY ];

    mz.proto.vec3 vec3__ = 5 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    mz.proto.vec4 vec4__ = 6 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    mz.proto.mat2 mat2__ = 7 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    mz.proto.mat3 mat3__ = 8 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];
    mz.proto.mat4 mat4__ = 9 [ (mz.proto.pin_show_as) = OUTPUT_PIN, (mz.proto.pin_can_show_as) = OUTPUT_PIN_ONLY ];

    mz.proto.Texture Texture_x = 10 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    mz.proto.Void Void_x       = 11 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    mz.proto.vec2 vec2_x     = 12 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    mz.proto.vec2i vec2i_x     = 13 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    mz.proto.vec3 vec3_x       = 14 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    mz.proto.vec4 vec4_x       = 15 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    mz.proto.mat2 mat2_x       = 16 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    mz.proto.mat3 mat3_x       = 17 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
    mz.proto.mat4 mat4_x      = 18 [ (mz.proto.pin_show_as) = PROPERTY, (mz.proto.pin_can_show_as) = PROPERTY_ONLY ];
}